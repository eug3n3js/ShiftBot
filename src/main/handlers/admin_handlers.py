from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import timedelta, datetime

from ..constants.handlers_constants import AdminPanelAction, MainMenuAction
from ..services import MessageService
from ..services.user_service import UserService
from .keyboards.admin_keyboard import admin_panel_keyboard, back_to_admin_panel_keyboard
from ..schemas import UserBase
from ..utils.username_utils import get_username_from_chat_id


class AdminInputStates(StatesGroup):
    waiting_for_username_grant_admin = State()
    waiting_for_username_revoke_admin = State()
    waiting_for_username_activate = State()
    waiting_for_username_deactivate = State()
    waiting_for_activation_time = State()
    waiting_for_message_to_all = State()


admin_router = Router(name="admin")


async def format_user_info(user: UserBase, bot) -> str:
    username = await get_username_from_chat_id(user.tg_id, bot)

    status = f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ {user.access_ends.strftime('%d.%m.%Y %H:%M')}" \
        if user.access_ends and user.access_ends > datetime.utcnow() else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    admin_status = "üëë –ê–¥–º–∏–Ω" if user.is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    return f"""
            üë§ {username}
            üÜî ID: {user.tg_id}
            {status}
            {admin_status}
            üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}
            """


def parse_activation_time(time_str: str) -> timedelta:
    try:
        parts = time_str.split(':')
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–µ—Å—è—Ü:–¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3:15)")
        
        months = int(parts[0])
        days = int(parts[1])
        
        if months < 0 or days < 0:
            raise ValueError("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        total_days = months * 30 + days
        return timedelta(days=total_days)
        
    except ValueError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")


@admin_router.callback_query(F.data == AdminPanelAction.VIEW_ALL_USERS)
async def on_view_all_users(callback: CallbackQuery) -> None:
    await callback.answer()
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(callback.message.chat.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    users = await user_service.get_all_users()
    
    if not users:
        await callback.message.edit_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    message_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users:
        user_info = await format_user_info(user, callback.bot)
        message_text += user_info + "\n"
    
    if len(message_text) > 4000:
        message_text = message_text[:3900] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=back_to_admin_panel_keyboard(),
    )


@admin_router.callback_query(F.data == AdminPanelAction.VIEW_ACTIVE_USERS)
async def on_view_active_users(callback: CallbackQuery) -> None:
    await callback.answer()
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(callback.message.chat.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    users = await user_service.get_active_users()
    
    if not users:
        await callback.message.edit_text(
            "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    message_text = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for user in users:
        user_info = await format_user_info(user, callback.bot)
        message_text += user_info + "\n"
    
    if len(message_text) > 4000:
        message_text = message_text[:3900] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=back_to_admin_panel_keyboard(),
    )


@admin_router.callback_query(F.data == AdminPanelAction.VIEW_ADMIN_USERS)
async def on_view_admin_users(callback: CallbackQuery) -> None:
    await callback.answer()
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(callback.message.chat.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    admins = await user_service.get_admins()
    
    if not admins:
        await callback.message.edit_text(
            "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    message_text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n"
    for admin in admins:
        admin_info = await format_user_info(admin, callback.bot)
        message_text += admin_info + "\n"
    
    if len(message_text) > 4000:
        message_text = message_text[:3900] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=back_to_admin_panel_keyboard(),
    )


@admin_router.callback_query(F.data == AdminPanelAction.GRANT_ADMIN)
async def on_grant_admin_start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.update_data(bot_message_id=callback.message.message_id)
    await state.set_state(AdminInputStates.waiting_for_username_grant_admin)
    
    await callback.message.edit_text(
        "‚ûï <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø—Ä–∞–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):",
        reply_markup=back_to_admin_panel_keyboard()
    )


@admin_router.message(AdminInputStates.waiting_for_username_grant_admin)
async def handle_grant_admin_username(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    username = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if not username:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    username = username.lstrip('@')
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(message.chat.id)):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    try:
        if username.isdigit():
            user = await user_service.get_user_by_tg_id(int(username))
        else:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–π–¥–∏.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        if not user:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        if user.is_admin:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        await user_service.grant_admin(user.id)

        message_service = MessageService.get_instance()
        admin_notification = f"üëë <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" \
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {user.id}) –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞\n" \
                             f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.username or message.from_user.first_name}"
        await message_service.send_message_all_admin(admin_notification, protect_content=False)
        
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}",
            reply_markup=back_to_admin_panel_keyboard()
        )
        
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=back_to_admin_panel_keyboard()
        )
    except Exception as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )
    
    await state.clear()


@admin_router.callback_query(F.data == AdminPanelAction.REVOKE_ADMIN)
async def on_revoke_admin_start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.update_data(bot_message_id=callback.message.message_id)
    await state.set_state(AdminInputStates.waiting_for_username_revoke_admin)
    
    await callback.message.edit_text(
        "‚ûñ <b>–û—Ç–∑—ã–≤ –∞–¥–º–∏–Ω –ø—Ä–∞–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):",
        reply_markup=back_to_admin_panel_keyboard()
    )


@admin_router.message(AdminInputStates.waiting_for_username_revoke_admin)
async def handle_revoke_admin_username(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    username = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if not username:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    username = username.lstrip('@')
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(message.chat.id)):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    try:
        if username.isdigit():
            user = await user_service.get_user_by_tg_id(int(username))
        else:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–π–¥–∏.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        if not user:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        if not user.is_admin:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        await user_service.revoke_admin(user.id)

        message_service = MessageService.get_instance()
        admin_notification = f"üë§ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" \
                             f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user.id}) –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞\n" \
                             f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.username or message.from_user.first_name}"
        await message_service.send_message_all_admin(admin_notification, protect_content=False)
        
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
            reply_markup=back_to_admin_panel_keyboard()
        )
        
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=back_to_admin_panel_keyboard()
        )
    except Exception as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )
    
    await state.clear()


@admin_router.callback_query(F.data == AdminPanelAction.ACTIVATE_USER)
async def on_activate_user_start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.update_data(bot_message_id=callback.message.message_id)
    await state.set_state(AdminInputStates.waiting_for_username_activate)
    
    await callback.message.edit_text(
        "üîì <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):",
        reply_markup=back_to_admin_panel_keyboard()
    )


@admin_router.message(AdminInputStates.waiting_for_username_activate)
async def handle_activate_user_username(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    username = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if not username:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    username = username.lstrip('@')
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(message.chat.id)):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    try:
        if username.isdigit():
            user = await user_service.get_user_by_tg_id(int(username))
        else:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–π–¥–∏.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        if not user:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        await state.update_data(user_id=user.id, username=username)
        await state.set_state(AdminInputStates.waiting_for_activation_time)
        
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–µ—Å—è—Ü:–¥–µ–Ω—å' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3:15 –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤ –∏ 15 –¥–Ω–µ–π):",
            reply_markup=back_to_admin_panel_keyboard()
        )
        
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=back_to_admin_panel_keyboard()
        )
    except Exception as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )


@admin_router.message(AdminInputStates.waiting_for_activation_time)
async def handle_activation_time(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    time_str = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if not time_str:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    try:
        time_delta = parse_activation_time(time_str)
        user_id = data.get('user_id')
        username = data.get('username')
        
        if not user_id:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            await state.clear()
            return
        
        user_service = UserService.get_instance()
        await user_service.activate(user_id, time_delta)
        
        message_service = MessageService.get_instance()
        admin_notification = f"üîì <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" \
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_str}\n" \
                             f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.username or message.from_user.first_name}"
        await message_service.send_message_all_admin(admin_notification, protect_content=False)
        
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_str}",
            reply_markup=back_to_admin_panel_keyboard()
        )
        
    except ValueError as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    except Exception as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )
    
    await state.clear()


@admin_router.callback_query(F.data == AdminPanelAction.DEACTIVATE_USER)
async def on_deactivate_user_start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.update_data(bot_message_id=callback.message.message_id)
    await state.set_state(AdminInputStates.waiting_for_username_deactivate)
    
    await callback.message.edit_text(
        "üîí <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):",
        reply_markup=back_to_admin_panel_keyboard()
    )


@admin_router.message(AdminInputStates.waiting_for_username_deactivate)
async def handle_deactivate_user_username(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    username = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if not username:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    username = username.lstrip('@')
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(message.chat.id)):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    try:
        if username.isdigit():
            user = await user_service.get_user_by_tg_id(int(username))
        else:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–π–¥–∏.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return
        
        if not user:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_to_admin_panel_keyboard()
            )
            return

        await user_service.deactivate(user.id)

        message_service = MessageService.get_instance()
        admin_notification = f"üîí <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" \
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user.id}) –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n" \
                             f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.username or message.from_user.first_name}"
        await message_service.send_message_all_admin(admin_notification, protect_content=False)
        
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=back_to_admin_panel_keyboard()
        )
        
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=back_to_admin_panel_keyboard()
        )
    except Exception as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )
    
    await state.clear()


@admin_router.callback_query(F.data == AdminPanelAction.BACK_TO_ADMIN_PANEL)
async def on_back_to_admin_panel(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_keyboard()
    )


@admin_router.callback_query(F.data == AdminPanelAction.SEND_MESSAGE_TO_ALL)
async def on_send_message_to_all_start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.update_data(bot_message_id=callback.message.message_id)
    await state.set_state(AdminInputStates.waiting_for_message_to_all)
    
    await callback.message.edit_text(
        "üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=back_to_admin_panel_keyboard()
    )


@admin_router.message(AdminInputStates.waiting_for_message_to_all)
async def handle_message_to_all(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")
    message_text = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if not message_text:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    user_service = UserService.get_instance()
    if not user_service.check_admin(await user_service.get_user_by_tg_id(message.chat.id)):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=back_to_admin_panel_keyboard()
        )
        return
    
    try:
        message_service = MessageService.get_instance()
        
        await message_service.send_message_all_users(message_text, protect_content=False)
        
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n{message_text}",
            reply_markup=back_to_admin_panel_keyboard()
        )
        
    except Exception as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
            reply_markup=back_to_admin_panel_keyboard()
        )
    
    await state.clear()


@admin_router.callback_query(F.data == MainMenuAction.ADMIN_PANEL)
async def on_back_to_admin_panel(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.clear()

    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_keyboard()
    )


